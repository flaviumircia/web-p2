;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void switchLed(int led_no){
; 0000 0018 void switchLed(int led_no){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0019 if(led_no==0){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	led_no -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001A led0=1;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001B }else{
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001C led0=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001D }
;PCODE: $0000001A VOL: 0
; 0000 001E if(led_no==1){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001F led1=1;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0020 }else{
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0021 led1=0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0022 }
;PCODE: $00000024 VOL: 0
; 0000 0023 if(led_no==2){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0024 led2=1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0025 }else{
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0026 led2=0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0027 }
;PCODE: $0000002E VOL: 0
; 0000 0028 if(led_no==3){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0029 led3=1;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002A }else{
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002B led3=0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002C }
;PCODE: $00000038 VOL: 0
; 0000 002D if(led_no==4){
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002E led4=1;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002F }else{
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0030 led4=0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0031 }
;PCODE: $00000042 VOL: 0
; 0000 0032 if(led_no==5){
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0033 led5=1;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0034 }else{
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0035 led5=0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0036 }
;PCODE: $0000004C VOL: 0
; 0000 0037 if(led_no==6){
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0038 led6=1;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0039 }else{
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003A led6=0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 003B }
;PCODE: $00000056 VOL: 0
; 0000 003C }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;void calibrateAxis(int y_axis){
; 0000 003D void calibrateAxis(int y_axis){
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003E //-17 <=> 17
; 0000 003F y_axis+=17;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;	y_axis -> R16,R17
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0040 // 0<=>34
; 0000 0041 if(y_axis<=5)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0042 switchLed(6);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0043 else if(y_axis<=10)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0044 switchLed(5);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0045 else if(y_axis<=15)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0046 switchLed(4);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0047 else if(y_axis<=20)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0048 switchLed(3);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0049 else if(y_axis<=25)
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 004A switchLed(2);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004B else if(y_axis<=30)
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 004C switchLed(1);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004D else if(y_axis<=35)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 004E switchLed(0);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 004F }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;void main(void)
; 0000 0051 {
;PCODE: $000000A1 VOL: 0
; 0000 0052 // Declare your local variables here
; 0000 0053 int x_accel, y_accel, z_accel;
; 0000 0054 unsigned char accel_data[6];
; 0000 0055 unsigned char  accel_reg;
; 0000 0056 int counter=0;
; 0000 0057 // Configure MPU6050
; 0000 0058 unsigned char config_data[] = { 0x6B, 0x00 }; // Set PWR_MGMT_1 register to 0x00 to wake up the sensor
; 0000 0059 // Crystal Oscillator division factor: 1
; 0000 005A #pragma optsize-
; 0000 005B CLKPR=(1<<CLKPCE);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;	x_accel -> R16,R17
;	y_accel -> R18,R19
;	z_accel -> R20,R21
;	accel_data -> Y+5
;	accel_reg -> Y+4
;	counter -> Y+2
;	config_data -> Y+0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 005C CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005D #ifdef _OPTIMIZE_SIZE_
; 0000 005E #pragma optsize+
; 0000 005F #endif
; 0000 0060 
; 0000 0061 // Input/Output Ports initialization
; 0000 0062 // Port A initialization
; 0000 0063 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0064 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0065 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0066 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0067 
; 0000 0068 // Port B initialization
; 0000 0069 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 006A DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 006B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 006C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 006D 
; 0000 006E // Port C initialization
; 0000 006F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0070 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0071 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0072 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0073 
; 0000 0074 // Port D initialization
; 0000 0075 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0076 DDRD=(0<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0077 // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0078 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0079 
; 0000 007A // Timer/Counter 0 initialization
; 0000 007B // Clock source: System Clock
; 0000 007C // Clock value: Timer 0 Stopped
; 0000 007D // Mode: Normal top=0xFF
; 0000 007E // OC0A output: Disconnected
; 0000 007F // OC0B output: Disconnected
; 0000 0080 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0081 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0082 TCNT0=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0083 OCR0A=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0084 OCR0B=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: Timer1 Stopped
; 0000 0089 // Mode: Normal top=0xFFFF
; 0000 008A // OC1A output: Disconnected
; 0000 008B // OC1B output: Disconnected
; 0000 008C // Noise Canceler: Off
; 0000 008D // Input Capture on Falling Edge
; 0000 008E // Timer1 Overflow Interrupt: Off
; 0000 008F // Input Capture Interrupt: Off
; 0000 0090 // Compare A Match Interrupt: Off
; 0000 0091 // Compare B Match Interrupt: Off
; 0000 0092 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0093 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0094 TCNT1H=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0095 TCNT1L=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0096 ICR1H=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0097 ICR1L=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0098 OCR1AH=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0099 OCR1AL=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 009A OCR1BH=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 009B OCR1BL=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 2 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: Timer2 Stopped
; 0000 00A0 // Mode: Normal top=0xFF
; 0000 00A1 // OC2A output: Disconnected
; 0000 00A2 // OC2B output: Disconnected
; 0000 00A3 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00A4 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00A5 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00A6 TCNT2=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00A7 OCR2A=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A8 OCR2B=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00A9 
; 0000 00AA // Timer/Counter 0 Interrupt(s) initialization
; 0000 00AB TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00AC 
; 0000 00AD // Timer/Counter 1 Interrupt(s) initialization
; 0000 00AE TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00AF 
; 0000 00B0 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00B1 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00B2 
; 0000 00B3 // External Interrupt(s) initialization
; 0000 00B4 // INT0: Off
; 0000 00B5 // INT1: Off
; 0000 00B6 // INT2: Off
; 0000 00B7 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00B8 // Interrupt on any change on pins PCINT8-15: Off
; 0000 00B9 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00BA // Interrupt on any change on pins PCINT24-31: Off
; 0000 00BB EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00BC EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00BD PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00BE 
; 0000 00BF // USART0 initialization
; 0000 00C0 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C1 // USART0 Receiver: On
; 0000 00C2 // USART0 Transmitter: On
; 0000 00C3 // USART0 Mode: Asynchronous
; 0000 00C4 // USART0 Baud Rate: 9600
; 0000 00C5 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00C6 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00C7 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00C8 UBRR0H=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00C9 UBRR0L=0x81;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00CA 
; 0000 00CB // USART1 initialization
; 0000 00CC // USART1 disabled
; 0000 00CD UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00CE 
; 0000 00CF // Analog Comparator initialization
; 0000 00D0 // Analog Comparator: Off
; 0000 00D1 // The Analog Comparator's positive input is
; 0000 00D2 // connected to the AIN0 pin
; 0000 00D3 // The Analog Comparator's negative input is
; 0000 00D4 // connected to the AIN1 pin
; 0000 00D5 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00D6 ADCSRB=(0<<ACME);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00D7 // Digital input buffer on AIN0: On
; 0000 00D8 // Digital input buffer on AIN1: On
; 0000 00D9 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00DA 
; 0000 00DB // ADC initialization
; 0000 00DC // ADC disabled
; 0000 00DD ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00DE 
; 0000 00DF // SPI initialization
; 0000 00E0 // SPI disabled
; 0000 00E1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00E2 
; 0000 00E3 // TWI initialization
; 0000 00E4 // Mode: TWI Master
; 0000 00E5 // Bit Rate: 96 kHz
; 0000 00E6 twi_master_init(96);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00E7 
; 0000 00E8 // Globally enable interrupts
; 0000 00E9 #asm("sei")
;PCODE: $0000010E VOL: 0
; 0000 00EA 
; 0000 00EB twi_master_trans(MPU6050_ADDR, config_data, 2, NULL, 0); // Write to MPU6050
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00EC 
; 0000 00ED // Read accelerometer data
; 0000 00EE accel_reg = 0x3B;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00EF // Starting register address for accelerometer data
; 0000 00F0 
; 0000 00F1 while (1) {
;PCODE: $0000011B VOL: 0
; 0000 00F2 
; 0000 00F3 // read accelerometer data from MPU 6050
; 0000 00F4 twi_master_trans(MPU6050_ADDR, &accel_reg, 1, accel_data, 6); // Read from MPU6050
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00F5 
; 0000 00F6 // Interpret the data
; 0000 00F7 x_accel = (short)((accel_data[0] << 8) | accel_data[1]);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00F8 y_accel = (short)((accel_data[2] << 8) | accel_data[3]);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00F9 z_accel = (short)((accel_data[4] << 8) | accel_data[5]);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00FA led_button=1;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00FB // print the accelerometer data
; 0000 00FC printf("X-axis acceleration: %d;", y_accel);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00FD if(counter<5){
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00FE counter++;}
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00FF printf("\r\n");
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0100 if(counter==5){
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0101 calibrateAxis(y_accel/1000);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0102 counter=0;}
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0103 }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0104 }
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
