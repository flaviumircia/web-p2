
AVRASM ver. 2.1.30  C:\Users\Flaviu\Desktop\P\Debug\List\nivela_cu_bula.asm Sat May 06 20:16:24 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.51 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0252 	JMP  _twi_int_handler
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000047 2d58
000048 7861
000049 7369
00004a 6120      	.DB  0x58,0x2D,0x61,0x78,0x69,0x73,0x20,0x61
00004b 6363
00004c 6c65
00004d 7265
00004e 7461      	.DB  0x63,0x63,0x65,0x6C,0x65,0x72,0x61,0x74
00004f 6f69
000050 3a6e
000051 2520
000052 3b64      	.DB  0x69,0x6F,0x6E,0x3A,0x20,0x25,0x64,0x3B
000053 0d00
000054 000a      	.DB  0x0,0xD,0xA,0x0
                 _0x2000003:
C:\Users\Flaviu\Desktop\P\Debug\List\nivela_cu_bula.asm(1473): warning: .cseg .db misalignment - padding zero byte
000055 0007      	.DB  0x7
                 
                 __GLOBAL_INI_TBL:
000056 0001      	.DW  0x01
000057 0202      	.DW  _twi_result
000058 00aa      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000059 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005a 94f8      	CLI
00005b 27ee      	CLR  R30
00005c bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005d e0f1      	LDI  R31,1
00005e bff5      	OUT  MCUCR,R31
00005f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000060 e08d      	LDI  R24,(14-2)+1
000061 e0a2      	LDI  R26,2
000062 27bb      	CLR  R27
                 __CLEAR_REG:
000063 93ed      	ST   X+,R30
000064 958a      	DEC  R24
000065 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000066 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000067 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000068 e0a0      	LDI  R26,LOW(__SRAM_START)
000069 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006a 93ed      	ST   X+,R30
00006b 9701      	SBIW R24,1
00006c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006d eaec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006f 9185      	LPM  R24,Z+
000070 9195      	LPM  R25,Z+
000071 9700      	SBIW R24,0
000072 f061      	BREQ __GLOBAL_INI_END
000073 91a5      	LPM  R26,Z+
000074 91b5      	LPM  R27,Z+
000075 9005      	LPM  R0,Z+
000076 9015      	LPM  R1,Z+
000077 01bf      	MOVW R22,R30
000078 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000079 9005      	LPM  R0,Z+
00007a 920d      	ST   X+,R0
00007b 9701      	SBIW R24,1
00007c f7e1      	BRNE __GLOBAL_INI_LOOP
00007d 01fb      	MOVW R30,R22
00007e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00007f e0e0      	LDI  R30,__GPIOR0_INIT
000080 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000081 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000082 bfed      	OUT  SPL,R30
000083 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000084 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000085 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000086 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000087 940c 00f6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;void switchLed(int led_no){
                 ; 0000 0018 void switchLed(int led_no){
                 
                 	.CSEG
                 _switchLed:
                 ; .FSTART _switchLed
                 ; 0000 0019 if(led_no==0){
000089 931a      	ST   -Y,R17
00008a 930a      	ST   -Y,R16
00008b 018d      	MOVW R16,R26
                 ;	led_no -> R16,R17
00008c 2e00      	MOV  R0,R16
00008d 2a01      	OR   R0,R17
00008e f411      	BRNE _0x3
                 ; 0000 001A led0=1;
00008f 9a28      	SBI  0x5,0
                 ; 0000 001B }else{
000090 c001      	RJMP _0x6
                 _0x3:
                 ; 0000 001C led0=0;
000091 9828      	CBI  0x5,0
                 ; 0000 001D }
                 _0x6:
                 ; 0000 001E if(led_no==1){
000092 e0e1      	LDI  R30,LOW(1)
000093 e0f0      	LDI  R31,HIGH(1)
000094 17e0      	CP   R30,R16
000095 07f1      	CPC  R31,R17
000096 f411      	BRNE _0x9
                 ; 0000 001F led1=1;
000097 9a29      	SBI  0x5,1
                 ; 0000 0020 }else{
000098 c001      	RJMP _0xC
                 _0x9:
                 ; 0000 0021 led1=0;
000099 9829      	CBI  0x5,1
                 ; 0000 0022 }
                 _0xC:
                 ; 0000 0023 if(led_no==2){
00009a e0e2      	LDI  R30,LOW(2)
00009b e0f0      	LDI  R31,HIGH(2)
00009c 17e0      	CP   R30,R16
00009d 07f1      	CPC  R31,R17
00009e f411      	BRNE _0xF
                 ; 0000 0024 led2=1;
00009f 9a2a      	SBI  0x5,2
                 ; 0000 0025 }else{
0000a0 c001      	RJMP _0x12
                 _0xF:
                 ; 0000 0026 led2=0;
0000a1 982a      	CBI  0x5,2
                 ; 0000 0027 }
                 _0x12:
                 ; 0000 0028 if(led_no==3){
0000a2 e0e3      	LDI  R30,LOW(3)
0000a3 e0f0      	LDI  R31,HIGH(3)
0000a4 17e0      	CP   R30,R16
0000a5 07f1      	CPC  R31,R17
0000a6 f411      	BRNE _0x15
                 ; 0000 0029 led3=1;
0000a7 9a2b      	SBI  0x5,3
                 ; 0000 002A }else{
0000a8 c001      	RJMP _0x18
                 _0x15:
                 ; 0000 002B led3=0;
0000a9 982b      	CBI  0x5,3
                 ; 0000 002C }
                 _0x18:
                 ; 0000 002D if(led_no==4){
0000aa e0e4      	LDI  R30,LOW(4)
0000ab e0f0      	LDI  R31,HIGH(4)
0000ac 17e0      	CP   R30,R16
0000ad 07f1      	CPC  R31,R17
0000ae f411      	BRNE _0x1B
                 ; 0000 002E led4=1;
0000af 9a2c      	SBI  0x5,4
                 ; 0000 002F }else{
0000b0 c001      	RJMP _0x1E
                 _0x1B:
                 ; 0000 0030 led4=0;
0000b1 982c      	CBI  0x5,4
                 ; 0000 0031 }
                 _0x1E:
                 ; 0000 0032 if(led_no==5){
0000b2 e0e5      	LDI  R30,LOW(5)
0000b3 e0f0      	LDI  R31,HIGH(5)
0000b4 17e0      	CP   R30,R16
0000b5 07f1      	CPC  R31,R17
0000b6 f411      	BRNE _0x21
                 ; 0000 0033 led5=1;
0000b7 9a2d      	SBI  0x5,5
                 ; 0000 0034 }else{
0000b8 c001      	RJMP _0x24
                 _0x21:
                 ; 0000 0035 led5=0;
0000b9 982d      	CBI  0x5,5
                 ; 0000 0036 }
                 _0x24:
                 ; 0000 0037 if(led_no==6){
0000ba e0e6      	LDI  R30,LOW(6)
0000bb e0f0      	LDI  R31,HIGH(6)
0000bc 17e0      	CP   R30,R16
0000bd 07f1      	CPC  R31,R17
0000be f411      	BRNE _0x27
                 ; 0000 0038 led6=1;
0000bf 9a2e      	SBI  0x5,6
                 ; 0000 0039 }else{
0000c0 c001      	RJMP _0x2A
                 _0x27:
                 ; 0000 003A led6=0;
0000c1 982e      	CBI  0x5,6
                 ; 0000 003B }
                 _0x2A:
                 ; 0000 003C }
0000c2 c030      	RJMP _0x2080003
                 ; .FEND
                 ;void calibrateAxis(int y_axis){
                 ; 0000 003D void calibrateAxis(int y_axis){
                 _calibrateAxis:
                 ; .FSTART _calibrateAxis
                 ; 0000 003E //-17 <=> 17
                 ; 0000 003F y_axis+=17;
0000c3 931a      	ST   -Y,R17
0000c4 930a      	ST   -Y,R16
0000c5 018d      	MOVW R16,R26
                 ;	y_axis -> R16,R17
                +
0000c6 5e0f     +SUBI R16 , LOW ( - 17 )
0000c7 4f1f     +SBCI R17 , HIGH ( - 17 )
                 	__ADDWRN 16,17,17
                 ; 0000 0040 // 0<=>34
                 ; 0000 0041 if(y_axis<=5)
                +
0000c8 3006     +CPI R16 , LOW ( 6 )
0000c9 e0e0     +LDI R30 , HIGH ( 6 )
0000ca 071e     +CPC R17 , R30
                 	__CPWRN 16,17,6
0000cb f414      	BRGE _0x2D
                 ; 0000 0042 switchLed(6);
0000cc e0a6      	LDI  R26,LOW(6)
0000cd c023      	RJMP _0x42
                 ; 0000 0043 else if(y_axis<=10)
                 _0x2D:
                +
0000ce 300b     +CPI R16 , LOW ( 11 )
0000cf e0e0     +LDI R30 , HIGH ( 11 )
0000d0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
0000d1 f414      	BRGE _0x2F
                 ; 0000 0044 switchLed(5);
0000d2 e0a5      	LDI  R26,LOW(5)
0000d3 c01d      	RJMP _0x42
                 ; 0000 0045 else if(y_axis<=15)
                 _0x2F:
                +
0000d4 3100     +CPI R16 , LOW ( 16 )
0000d5 e0e0     +LDI R30 , HIGH ( 16 )
0000d6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
0000d7 f414      	BRGE _0x31
                 ; 0000 0046 switchLed(4);
0000d8 e0a4      	LDI  R26,LOW(4)
0000d9 c017      	RJMP _0x42
                 ; 0000 0047 else if(y_axis<=20)
                 _0x31:
                +
0000da 3105     +CPI R16 , LOW ( 21 )
0000db e0e0     +LDI R30 , HIGH ( 21 )
0000dc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,21
0000dd f414      	BRGE _0x33
                 ; 0000 0048 switchLed(3);
0000de e0a3      	LDI  R26,LOW(3)
0000df c011      	RJMP _0x42
                 ; 0000 0049 else if(y_axis<=25)
                 _0x33:
                +
0000e0 310a     +CPI R16 , LOW ( 26 )
0000e1 e0e0     +LDI R30 , HIGH ( 26 )
0000e2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,26
0000e3 f414      	BRGE _0x35
                 ; 0000 004A switchLed(2);
0000e4 e0a2      	LDI  R26,LOW(2)
0000e5 c00b      	RJMP _0x42
                 ; 0000 004B else if(y_axis<=30)
                 _0x35:
                +
0000e6 310f     +CPI R16 , LOW ( 31 )
0000e7 e0e0     +LDI R30 , HIGH ( 31 )
0000e8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
0000e9 f414      	BRGE _0x37
                 ; 0000 004C switchLed(1);
0000ea e0a1      	LDI  R26,LOW(1)
0000eb c005      	RJMP _0x42
                 ; 0000 004D else if(y_axis<=35)
                 _0x37:
                +
0000ec 3204     +CPI R16 , LOW ( 36 )
0000ed e0e0     +LDI R30 , HIGH ( 36 )
0000ee 071e     +CPC R17 , R30
                 	__CPWRN 16,17,36
0000ef f41c      	BRGE _0x39
                 ; 0000 004E switchLed(0);
0000f0 e0a0      	LDI  R26,LOW(0)
                 _0x42:
0000f1 e0b0      	LDI  R27,0
0000f2 df96      	RCALL _switchLed
                 ; 0000 004F }
                 _0x39:
                 _0x2080003:
0000f3 9109      	LD   R16,Y+
0000f4 9119      	LD   R17,Y+
0000f5 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 0051 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0052 // Declare your local variables here
                 ; 0000 0053 int x_accel, y_accel, z_accel;
                 ; 0000 0054 unsigned char accel_data[6];
                 ; 0000 0055 unsigned char  accel_reg;
                 ; 0000 0056 int counter=0;
                 ; 0000 0057 // Configure MPU6050
                 ; 0000 0058 unsigned char config_data[] = { 0x6B, 0x00 }; // Set PWR_MGMT_1 register to 0x00 to wake up the sensor
                 ; 0000 0059 // Crystal Oscillator division factor: 1
                 ; 0000 005A #pragma optsize-
                 ; 0000 005B CLKPR=(1<<CLKPCE);
0000f6 972b      	SBIW R28,11
0000f7 e6eb      	LDI  R30,LOW(107)
0000f8 83e8      	ST   Y,R30
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa 83e9      	STD  Y+1,R30
0000fb 83ea      	STD  Y+2,R30
0000fc 83eb      	STD  Y+3,R30
                 ;	x_accel -> R16,R17
                 ;	y_accel -> R18,R19
                 ;	z_accel -> R20,R21
                 ;	accel_data -> Y+5
                 ;	accel_reg -> Y+4
                 ;	counter -> Y+2
                 ;	config_data -> Y+0
0000fd e8e0      	LDI  R30,LOW(128)
0000fe 93e0 0061 	STS  97,R30
                 ; 0000 005C CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000100 e0e0      	LDI  R30,LOW(0)
000101 93e0 0061 	STS  97,R30
                 ; 0000 005D #ifdef _OPTIMIZE_SIZE_
                 ; 0000 005E #pragma optsize+
                 ; 0000 005F #endif
                 ; 0000 0060 
                 ; 0000 0061 // Input/Output Ports initialization
                 ; 0000 0062 // Port A initialization
                 ; 0000 0063 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0064 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000103 b9e1      	OUT  0x1,R30
                 ; 0000 0065 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0066 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000104 b9e2      	OUT  0x2,R30
                 ; 0000 0067 
                 ; 0000 0068 // Port B initialization
                 ; 0000 0069 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 006A DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000105 efef      	LDI  R30,LOW(255)
000106 b9e4      	OUT  0x4,R30
                 ; 0000 006B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 006C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000107 e0e0      	LDI  R30,LOW(0)
000108 b9e5      	OUT  0x5,R30
                 ; 0000 006D 
                 ; 0000 006E // Port C initialization
                 ; 0000 006F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0070 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000109 b9e7      	OUT  0x7,R30
                 ; 0000 0071 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0072 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00010a b9e8      	OUT  0x8,R30
                 ; 0000 0073 
                 ; 0000 0074 // Port D initialization
                 ; 0000 0075 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0076 DDRD=(0<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00010b e4e0      	LDI  R30,LOW(64)
00010c b9ea      	OUT  0xA,R30
                 ; 0000 0077 // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0078 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00010d e0e0      	LDI  R30,LOW(0)
00010e b9eb      	OUT  0xB,R30
                 ; 0000 0079 
                 ; 0000 007A // Timer/Counter 0 initialization
                 ; 0000 007B // Clock source: System Clock
                 ; 0000 007C // Clock value: Timer 0 Stopped
                 ; 0000 007D // Mode: Normal top=0xFF
                 ; 0000 007E // OC0A output: Disconnected
                 ; 0000 007F // OC0B output: Disconnected
                 ; 0000 0080 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
00010f bde4      	OUT  0x24,R30
                 ; 0000 0081 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000110 bde5      	OUT  0x25,R30
                 ; 0000 0082 TCNT0=0x00;
000111 bde6      	OUT  0x26,R30
                 ; 0000 0083 OCR0A=0x00;
000112 bde7      	OUT  0x27,R30
                 ; 0000 0084 OCR0B=0x00;
000113 bde8      	OUT  0x28,R30
                 ; 0000 0085 
                 ; 0000 0086 // Timer/Counter 1 initialization
                 ; 0000 0087 // Clock source: System Clock
                 ; 0000 0088 // Clock value: Timer1 Stopped
                 ; 0000 0089 // Mode: Normal top=0xFFFF
                 ; 0000 008A // OC1A output: Disconnected
                 ; 0000 008B // OC1B output: Disconnected
                 ; 0000 008C // Noise Canceler: Off
                 ; 0000 008D // Input Capture on Falling Edge
                 ; 0000 008E // Timer1 Overflow Interrupt: Off
                 ; 0000 008F // Input Capture Interrupt: Off
                 ; 0000 0090 // Compare A Match Interrupt: Off
                 ; 0000 0091 // Compare B Match Interrupt: Off
                 ; 0000 0092 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000114 93e0 0080 	STS  128,R30
                 ; 0000 0093 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000116 93e0 0081 	STS  129,R30
                 ; 0000 0094 TCNT1H=0x00;
000118 93e0 0085 	STS  133,R30
                 ; 0000 0095 TCNT1L=0x00;
00011a 93e0 0084 	STS  132,R30
                 ; 0000 0096 ICR1H=0x00;
00011c 93e0 0087 	STS  135,R30
                 ; 0000 0097 ICR1L=0x00;
00011e 93e0 0086 	STS  134,R30
                 ; 0000 0098 OCR1AH=0x00;
000120 93e0 0089 	STS  137,R30
                 ; 0000 0099 OCR1AL=0x00;
000122 93e0 0088 	STS  136,R30
                 ; 0000 009A OCR1BH=0x00;
000124 93e0 008b 	STS  139,R30
                 ; 0000 009B OCR1BL=0x00;
000126 93e0 008a 	STS  138,R30
                 ; 0000 009C 
                 ; 0000 009D // Timer/Counter 2 initialization
                 ; 0000 009E // Clock source: System Clock
                 ; 0000 009F // Clock value: Timer2 Stopped
                 ; 0000 00A0 // Mode: Normal top=0xFF
                 ; 0000 00A1 // OC2A output: Disconnected
                 ; 0000 00A2 // OC2B output: Disconnected
                 ; 0000 00A3 ASSR=(0<<EXCLK) | (0<<AS2);
000128 93e0 00b6 	STS  182,R30
                 ; 0000 00A4 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
00012a 93e0 00b0 	STS  176,R30
                 ; 0000 00A5 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00012c 93e0 00b1 	STS  177,R30
                 ; 0000 00A6 TCNT2=0x00;
00012e 93e0 00b2 	STS  178,R30
                 ; 0000 00A7 OCR2A=0x00;
000130 93e0 00b3 	STS  179,R30
                 ; 0000 00A8 OCR2B=0x00;
000132 93e0 00b4 	STS  180,R30
                 ; 0000 00A9 
                 ; 0000 00AA // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00AB TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
000134 93e0 006e 	STS  110,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00AE TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
000136 93e0 006f 	STS  111,R30
                 ; 0000 00AF 
                 ; 0000 00B0 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00B1 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000138 93e0 0070 	STS  112,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // External Interrupt(s) initialization
                 ; 0000 00B4 // INT0: Off
                 ; 0000 00B5 // INT1: Off
                 ; 0000 00B6 // INT2: Off
                 ; 0000 00B7 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 00B8 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 00B9 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 00BA // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 00BB EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00013a 93e0 0069 	STS  105,R30
                 ; 0000 00BC EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
00013c bbed      	OUT  0x1D,R30
                 ; 0000 00BD PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
00013d 93e0 0068 	STS  104,R30
                 ; 0000 00BE 
                 ; 0000 00BF // USART0 initialization
                 ; 0000 00C0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00C1 // USART0 Receiver: On
                 ; 0000 00C2 // USART0 Transmitter: On
                 ; 0000 00C3 // USART0 Mode: Asynchronous
                 ; 0000 00C4 // USART0 Baud Rate: 9600
                 ; 0000 00C5 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00013f 93e0 00c0 	STS  192,R30
                 ; 0000 00C6 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000141 e1e8      	LDI  R30,LOW(24)
000142 93e0 00c1 	STS  193,R30
                 ; 0000 00C7 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000144 e0e6      	LDI  R30,LOW(6)
000145 93e0 00c2 	STS  194,R30
                 ; 0000 00C8 UBRR0H=0x00;
000147 e0e0      	LDI  R30,LOW(0)
000148 93e0 00c5 	STS  197,R30
                 ; 0000 00C9 UBRR0L=0x81;
00014a e8e1      	LDI  R30,LOW(129)
00014b 93e0 00c4 	STS  196,R30
                 ; 0000 00CA 
                 ; 0000 00CB // USART1 initialization
                 ; 0000 00CC // USART1 disabled
                 ; 0000 00CD UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00014d e0e0      	LDI  R30,LOW(0)
00014e 93e0 00c9 	STS  201,R30
                 ; 0000 00CE 
                 ; 0000 00CF // Analog Comparator initialization
                 ; 0000 00D0 // Analog Comparator: Off
                 ; 0000 00D1 // The Analog Comparator's positive input is
                 ; 0000 00D2 // connected to the AIN0 pin
                 ; 0000 00D3 // The Analog Comparator's negative input is
                 ; 0000 00D4 // connected to the AIN1 pin
                 ; 0000 00D5 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000150 e8e0      	LDI  R30,LOW(128)
000151 bfe0      	OUT  0x30,R30
                 ; 0000 00D6 ADCSRB=(0<<ACME);
000152 e0e0      	LDI  R30,LOW(0)
000153 93e0 007b 	STS  123,R30
                 ; 0000 00D7 // Digital input buffer on AIN0: On
                 ; 0000 00D8 // Digital input buffer on AIN1: On
                 ; 0000 00D9 DIDR1=(0<<AIN0D) | (0<<AIN1D);
000155 93e0 007f 	STS  127,R30
                 ; 0000 00DA 
                 ; 0000 00DB // ADC initialization
                 ; 0000 00DC // ADC disabled
                 ; 0000 00DD ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000157 93e0 007a 	STS  122,R30
                 ; 0000 00DE 
                 ; 0000 00DF // SPI initialization
                 ; 0000 00E0 // SPI disabled
                 ; 0000 00E1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000159 bdec      	OUT  0x2C,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // TWI initialization
                 ; 0000 00E4 // Mode: TWI Master
                 ; 0000 00E5 // Bit Rate: 96 kHz
                 ; 0000 00E6 twi_master_init(96);
00015a e6a0      	LDI  R26,LOW(96)
00015b e0b0      	LDI  R27,0
00015c d064      	RCALL _twi_master_init
                 ; 0000 00E7 
                 ; 0000 00E8 // Globally enable interrupts
                 ; 0000 00E9 #asm("sei")
00015d 9478      	SEI
                 ; 0000 00EA 
                 ; 0000 00EB twi_master_trans(MPU6050_ADDR, config_data, 2, NULL, 0); // Write to MPU6050
00015e e6e8      	LDI  R30,LOW(104)
00015f 93ea      	ST   -Y,R30
000160 01fe      	MOVW R30,R28
000161 9631      	ADIW R30,1
000162 93fa      	ST   -Y,R31
000163 93ea      	ST   -Y,R30
000164 e0e2      	LDI  R30,LOW(2)
000165 93ea      	ST   -Y,R30
000166 e0e0      	LDI  R30,LOW(0)
000167 e0f0      	LDI  R31,HIGH(0)
000168 93fa      	ST   -Y,R31
000169 93ea      	ST   -Y,R30
00016a e0a0      	LDI  R26,LOW(0)
00016b d080      	RCALL _twi_master_trans
                 ; 0000 00EC 
                 ; 0000 00ED // Read accelerometer data
                 ; 0000 00EE accel_reg = 0x3B;
00016c e3eb      	LDI  R30,LOW(59)
00016d 83ec      	STD  Y+4,R30
                 ; 0000 00EF // Starting register address for accelerometer data
                 ; 0000 00F0 
                 ; 0000 00F1 while (1) {
                 _0x3A:
                 ; 0000 00F2 
                 ; 0000 00F3 // read accelerometer data from MPU 6050
                 ; 0000 00F4 twi_master_trans(MPU6050_ADDR, &accel_reg, 1, accel_data, 6); // Read from MPU6050
00016e e6e8      	LDI  R30,LOW(104)
00016f 93ea      	ST   -Y,R30
000170 01fe      	MOVW R30,R28
000171 9635      	ADIW R30,5
000172 93fa      	ST   -Y,R31
000173 93ea      	ST   -Y,R30
000174 e0e1      	LDI  R30,LOW(1)
000175 93ea      	ST   -Y,R30
000176 01fe      	MOVW R30,R28
000177 9639      	ADIW R30,9
000178 93fa      	ST   -Y,R31
000179 93ea      	ST   -Y,R30
00017a e0a6      	LDI  R26,LOW(6)
00017b d070      	RCALL _twi_master_trans
                 ; 0000 00F5 
                 ; 0000 00F6 // Interpret the data
                 ; 0000 00F7 x_accel = (short)((accel_data[0] << 8) | accel_data[1]);
00017c e0e0      	LDI  R30,0
00017d 81fd      	LDD  R31,Y+5
00017e 01df      	MOVW R26,R30
00017f 81ee      	LDD  R30,Y+6
000180 e0f0      	LDI  R31,0
000181 2bea      	OR   R30,R26
000182 2bfb      	OR   R31,R27
000183 018f      	MOVW R16,R30
                 ; 0000 00F8 y_accel = (short)((accel_data[2] << 8) | accel_data[3]);
000184 e0e0      	LDI  R30,0
000185 81ff      	LDD  R31,Y+7
000186 01df      	MOVW R26,R30
000187 85e8      	LDD  R30,Y+8
000188 e0f0      	LDI  R31,0
000189 2bea      	OR   R30,R26
00018a 2bfb      	OR   R31,R27
00018b 019f      	MOVW R18,R30
                 ; 0000 00F9 z_accel = (short)((accel_data[4] << 8) | accel_data[5]);
00018c e0e0      	LDI  R30,0
00018d 85f9      	LDD  R31,Y+9
00018e 01df      	MOVW R26,R30
00018f 85ea      	LDD  R30,Y+10
000190 e0f0      	LDI  R31,0
000191 2bea      	OR   R30,R26
000192 2bfb      	OR   R31,R27
000193 01af      	MOVW R20,R30
                 ; 0000 00FA led_button=1;
000194 9a5e      	SBI  0xB,6
                 ; 0000 00FB // print the accelerometer data
                 ; 0000 00FC printf("X-axis acceleration: %d;", y_accel);
                +
000195 e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000196 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000197 93fa      	ST   -Y,R31
000198 93ea      	ST   -Y,R30
000199 01f9      	MOVW R30,R18
                +
00019a 2f6f     +MOV R22 , R31
00019b 0f66     +ADD R22 , R22
00019c 0b66     +SBC R22 , R22
00019d 2f76     +MOV R23 , R22
                 	__CWD1
00019e d414      	RCALL __PUTPARD1
00019f e084      	LDI  R24,4
0001a0 d374      	RCALL _printf
0001a1 9626      	ADIW R28,6
                 ; 0000 00FD if(counter<5){
0001a2 81aa      	LDD  R26,Y+2
0001a3 81bb      	LDD  R27,Y+2+1
0001a4 9715      	SBIW R26,5
0001a5 f42c      	BRGE _0x3F
                 ; 0000 00FE counter++;}
0001a6 81ea      	LDD  R30,Y+2
0001a7 81fb      	LDD  R31,Y+2+1
0001a8 9631      	ADIW R30,1
0001a9 83ea      	STD  Y+2,R30
0001aa 83fb      	STD  Y+2+1,R31
                 ; 0000 00FF printf("\r\n");
                 _0x3F:
                +
0001ab eae7     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
0001ac e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
0001ad 93fa      	ST   -Y,R31
0001ae 93ea      	ST   -Y,R30
0001af e080      	LDI  R24,0
0001b0 d364      	RCALL _printf
0001b1 9622      	ADIW R28,2
                 ; 0000 0100 if(counter==5){
0001b2 81aa      	LDD  R26,Y+2
0001b3 81bb      	LDD  R27,Y+2+1
0001b4 9715      	SBIW R26,5
0001b5 f449      	BRNE _0x40
                 ; 0000 0101 calibrateAxis(y_accel/1000);
0001b6 01d9      	MOVW R26,R18
0001b7 eee8      	LDI  R30,LOW(1000)
0001b8 e0f3      	LDI  R31,HIGH(1000)
0001b9 d3e2      	RCALL __DIVW21
0001ba 01df      	MOVW R26,R30
0001bb df07      	RCALL _calibrateAxis
                 ; 0000 0102 counter=0;}
0001bc e0e0      	LDI  R30,LOW(0)
0001bd 83ea      	STD  Y+2,R30
0001be 83eb      	STD  Y+2+1,R30
                 ; 0000 0103 }
                 _0x40:
0001bf cfae      	RJMP _0x3A
                 ; 0000 0104 }
                 _0x41:
0001c0 cfff      	RJMP _0x41
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 _twi_master_init:
                 ; .FSTART _twi_master_init
0001c1 d3b7      	RCALL __SAVELOCR4
0001c2 019d      	MOVW R18,R26
0001c3 9af1      	SBI  0x1E,1
0001c4 e0e7      	LDI  R30,LOW(7)
0001c5 93e0 0202 	STS  _twi_result,R30
0001c7 e0e0      	LDI  R30,LOW(0)
0001c8 93e0 020b 	STS  _twi_slave_rx_handler_G100,R30
0001ca 93e0 020c 	STS  _twi_slave_rx_handler_G100+1,R30
0001cc 93e0 020d 	STS  _twi_slave_tx_handler_G100,R30
0001ce 93e0 020e 	STS  _twi_slave_tx_handler_G100+1,R30
0001d0 9841      	CBI  0x8,1
0001d1 9840      	CBI  0x8,0
0001d2 93e0 00bc 	STS  188,R30
0001d4 91e0 00b9 	LDS  R30,185
0001d6 7fec      	ANDI R30,LOW(0xFC)
0001d7 93e0 00b9 	STS  185,R30
0001d9 01f9      	MOVW R30,R18
0001da eaa0      	LDI  R26,LOW(4000)
0001db e0bf      	LDI  R27,HIGH(4000)
0001dc d3ac      	RCALL __DIVW21U
0001dd 2f1e      	MOV  R17,R30
0001de 3018      	CPI  R17,8
0001df f008      	BRLO _0x2000006
0001e0 5018      	SUBI R17,LOW(8)
                 _0x2000006:
0001e1 9310 00b8 	STS  184,R17
0001e3 91e0 00bc 	LDS  R30,188
0001e5 78e0      	ANDI R30,LOW(0x80)
0001e6 64e5      	ORI  R30,LOW(0x45)
0001e7 93e0 00bc 	STS  188,R30
0001e9 d396      	RCALL __LOADLOCR4
0001ea 9624      	ADIW R28,4
0001eb 9508      	RET
                 ; .FEND
                 _twi_master_trans:
                 ; .FSTART _twi_master_trans
0001ec 9724      	SBIW R28,4
0001ed d389      	RCALL __SAVELOCR6
0001ee 2f1a      	MOV  R17,R26
                +
0001ef 852a     +LDD R18 , Y + 10
0001f0 853b     +LDD R19 , Y + 10 + 1
                 	__GETWRS 18,19,10
0001f1 850c      	LDD  R16,Y+12
                +
0001f2 854d     +LDD R20 , Y + 13
0001f3 855e     +LDD R21 , Y + 13 + 1
                 	__GETWRS 20,21,13
0001f4 9bf1      	SBIS 0x1E,1
0001f5 c058      	RJMP _0x2000007
0001f6 85ef      	LDD  R30,Y+15
0001f7 0fee      	LSL  R30
0001f8 93e0 0203 	STS  _slave_address_G100,R30
                +
0001fa 9340 0204+STS _twi_tx_buffer_G100 + ( 0 ) , R20
0001fc 9350 0205+STS _twi_tx_buffer_G100 + ( 0 ) + 1 , R21
                 	__PUTWMRN _twi_tx_buffer_G100,0,20,21
0001fe e0e0      	LDI  R30,LOW(0)
0001ff 93e0 0200 	STS  _twi_tx_index,R30
000201 9300 0206 	STS  _bytes_to_tx_G100,R16
                +
000203 9320 0207+STS _twi_rx_buffer_G100 + ( 0 ) , R18
000205 9330 0208+STS _twi_rx_buffer_G100 + ( 0 ) + 1 , R19
                 	__PUTWMRN _twi_rx_buffer_G100,0,18,19
000207 93e0 0201 	STS  _twi_rx_index,R30
000209 9310 0209 	STS  _bytes_to_rx_G100,R17
00020b e0e6      	LDI  R30,LOW(6)
00020c 93e0 0202 	STS  _twi_result,R30
00020e 9478      	SEI
00020f 3000      	CPI  R16,0
000210 f069      	BREQ _0x2000008
000211 2e04      	MOV  R0,R20
000212 2a05      	OR   R0,R21
000213 f1d1      	BREQ _0x2080002
000214 3010      	CPI  R17,0
000215 f021      	BREQ _0x200000B
000216 2400      	CLR  R0
000217 1602      	CP   R0,R18
000218 0603      	CPC  R0,R19
000219 f009      	BREQ _0x200000C
                 _0x200000B:
00021a c001      	RJMP _0x200000A
                 _0x200000C:
00021b c032      	RJMP _0x2080002
                 _0x200000A:
00021c 9af0      	SBI  0x1E,0
00021d c00b      	RJMP _0x200000F
                 _0x2000008:
00021e 3010      	CPI  R17,0
00021f f131      	BREQ _0x2000010
000220 2e02      	MOV  R0,R18
000221 2a03      	OR   R0,R19
000222 f159      	BREQ _0x2080002
000223 91e0 0203 	LDS  R30,_slave_address_G100
000225 60e1      	ORI  R30,1
000226 93e0 0203 	STS  _slave_address_G100,R30
000228 98f0      	CBI  0x1E,0
                 _0x200000F:
000229 98f1      	CBI  0x1E,1
00022a 91e0 00bc 	LDS  R30,188
00022c 70ef      	ANDI R30,LOW(0xF)
00022d 6ae0      	ORI  R30,LOW(0xA0)
00022e 93e0 00bc 	STS  188,R30
                +
000230 e2e0     +LDI R30 , LOW ( 0x7A120 )
000231 eaf1     +LDI R31 , HIGH ( 0x7A120 )
000232 e067     +LDI R22 , BYTE3 ( 0x7A120 )
000233 e070     +LDI R23 , BYTE4 ( 0x7A120 )
                 	__GETD1N 0x7A120
000234 d320      	RCALL SUBOPT_0x0
                 _0x2000016:
000235 99f1      	SBIC 0x1E,1
000236 c00f      	RJMP _0x2000018
                +
000237 81ee     +LDD R30 , Y + 6
000238 81ff     +LDD R31 , Y + 6 + 1
000239 8568     +LDD R22 , Y + 6 + 2
00023a 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
00023b 9731      	SBIW R30,1
00023c 4060      	SBCI R22,0
00023d 4070      	SBCI R23,0
00023e d316      	RCALL SUBOPT_0x0
00023f f429      	BRNE _0x2000019
000240 e0e5      	LDI  R30,LOW(5)
000241 93e0 0202 	STS  _twi_result,R30
000243 9af1      	SBI  0x1E,1
000244 c009      	RJMP _0x2080002
                 _0x2000019:
000245 cfef      	RJMP _0x2000016
                 _0x2000018:
                 _0x2000010:
000246 91a0 0202 	LDS  R26,_twi_result
000248 e0e0      	LDI  R30,LOW(0)
                +
000249 17ea     +CP R30 , R26
00024a e0e1     +LDI R30 , 1
00024b f009     +BREQ PC + 2
00024c 27ee     +CLR R30
                 	__EQB12
00024d c001      	RJMP _0x2080001
                 _0x2000007:
                 _0x2080002:
00024e e0e0      	LDI  R30,LOW(0)
                 _0x2080001:
00024f d32e      	RCALL __LOADLOCR6
000250 9660      	ADIW R28,16
000251 9508      	RET
                 ; .FEND
                 _twi_int_handler:
                 ; .FSTART _twi_int_handler
000252 920a      	ST   -Y,R0
000253 921a      	ST   -Y,R1
000254 92fa      	ST   -Y,R15
000255 936a      	ST   -Y,R22
000256 937a      	ST   -Y,R23
000257 938a      	ST   -Y,R24
000258 939a      	ST   -Y,R25
000259 93aa      	ST   -Y,R26
00025a 93ba      	ST   -Y,R27
00025b 93ea      	ST   -Y,R30
00025c 93fa      	ST   -Y,R31
00025d b7ef      	IN   R30,SREG
00025e 93ea      	ST   -Y,R30
00025f 935a      	ST   -Y,R21
000260 934a      	ST   -Y,R20
000261 933a      	ST   -Y,R19
000262 932a      	ST   -Y,R18
000263 931a      	ST   -Y,R17
000264 930a      	ST   -Y,R16
000265 9110 0201 	LDS  R17,_twi_rx_index
000267 9100 0200 	LDS  R16,_twi_tx_index
000269 9130 0206 	LDS  R19,_bytes_to_tx_G100
00026b 9120 0202 	LDS  R18,_twi_result
00026d 2fe1      	MOV  R30,R17
00026e 91a0 0207 	LDS  R26,_twi_rx_buffer_G100
000270 91b0 0208 	LDS  R27,_twi_rx_buffer_G100+1
000272 e0f0      	LDI  R31,0
000273 0fea      	ADD  R30,R26
000274 1ffb      	ADC  R31,R27
000275 01af      	MOVW R20,R30
000276 91e0 00b9 	LDS  R30,185
000278 7fe8      	ANDI R30,LOW(0xF8)
000279 30e8      	CPI  R30,LOW(0x8)
00027a f411      	BRNE _0x2000023
00027b e020      	LDI  R18,LOW(0)
00027c c002      	RJMP _0x2000024
                 _0x2000023:
00027d 31e0      	CPI  R30,LOW(0x10)
00027e f419      	BRNE _0x2000025
                 _0x2000024:
00027f 91e0 0203 	LDS  R30,_slave_address_G100
000281 c010      	RJMP _0x2000080
                 _0x2000025:
000282 31e8      	CPI  R30,LOW(0x18)
000283 f011      	BREQ _0x2000029
000284 32e8      	CPI  R30,LOW(0x28)
000285 f541      	BRNE _0x200002A
                 _0x2000029:
000286 1703      	CP   R16,R19
000287 f498      	BRSH _0x200002B
000288 2fe0      	MOV  R30,R16
000289 5f0f      	SUBI R16,-1
00028a 91a0 0204 	LDS  R26,_twi_tx_buffer_G100
00028c 91b0 0205 	LDS  R27,_twi_tx_buffer_G100+1
00028e e0f0      	LDI  R31,0
00028f 0fae      	ADD  R26,R30
000290 1fbf      	ADC  R27,R31
000291 91ec      	LD   R30,X
                 _0x2000080:
000292 93e0 00bb 	STS  187,R30
000294 91e0 00bc 	LDS  R30,188
000296 70ef      	ANDI R30,LOW(0xF)
000297 68e0      	ORI  R30,0x80
000298 93e0 00bc 	STS  188,R30
00029a c012      	RJMP _0x200002C
                 _0x200002B:
00029b 91e0 0209 	LDS  R30,_bytes_to_rx_G100
00029d 171e      	CP   R17,R30
00029e f468      	BRSH _0x200002D
00029f 91e0 0203 	LDS  R30,_slave_address_G100
0002a1 60e1      	ORI  R30,1
0002a2 93e0 0203 	STS  _slave_address_G100,R30
0002a4 98f0      	CBI  0x1E,0
0002a5 91e0 00bc 	LDS  R30,188
0002a7 70ef      	ANDI R30,LOW(0xF)
0002a8 6ae0      	ORI  R30,LOW(0xA0)
0002a9 93e0 00bc 	STS  188,R30
0002ab c10d      	RJMP _0x2000022
                 _0x200002D:
0002ac c038      	RJMP _0x2000030
                 _0x200002C:
0002ad c10b      	RJMP _0x2000022
                 _0x200002A:
0002ae 35e0      	CPI  R30,LOW(0x50)
0002af f431      	BRNE _0x2000031
0002b0 91e0 00bb 	LDS  R30,187
0002b2 01da      	MOVW R26,R20
0002b3 93ec      	ST   X,R30
0002b4 5f1f      	SUBI R17,-LOW(1)
0002b5 c002      	RJMP _0x2000032
                 _0x2000031:
0002b6 34e0      	CPI  R30,LOW(0x40)
0002b7 f489      	BRNE _0x2000033
                 _0x2000032:
0002b8 91e0 0209 	LDS  R30,_bytes_to_rx_G100
0002ba 50e1      	SUBI R30,LOW(1)
0002bb 171e      	CP   R17,R30
0002bc f028      	BRLO _0x2000034
0002bd 91e0 00bc 	LDS  R30,188
0002bf 70ef      	ANDI R30,LOW(0xF)
0002c0 68e0      	ORI  R30,0x80
0002c1 c004      	RJMP _0x2000081
                 _0x2000034:
0002c2 91e0 00bc 	LDS  R30,188
0002c4 70ef      	ANDI R30,LOW(0xF)
0002c5 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2000081:
0002c6 93e0 00bc 	STS  188,R30
0002c8 c0f0      	RJMP _0x2000022
                 _0x2000033:
0002c9 35e8      	CPI  R30,LOW(0x58)
0002ca f431      	BRNE _0x2000036
0002cb 91e0 00bb 	LDS  R30,187
0002cd 01da      	MOVW R26,R20
0002ce 93ec      	ST   X,R30
0002cf 5f1f      	SUBI R17,-LOW(1)
0002d0 c002      	RJMP _0x2000037
                 _0x2000036:
0002d1 32e0      	CPI  R30,LOW(0x20)
0002d2 f409      	BRNE _0x2000038
                 _0x2000037:
0002d3 c002      	RJMP _0x2000039
                 _0x2000038:
0002d4 33e0      	CPI  R30,LOW(0x30)
0002d5 f409      	BRNE _0x200003A
                 _0x2000039:
0002d6 c002      	RJMP _0x200003B
                 _0x200003A:
0002d7 34e8      	CPI  R30,LOW(0x48)
0002d8 f469      	BRNE _0x200003C
                 _0x200003B:
0002d9 3020      	CPI  R18,0
0002da f451      	BRNE _0x200003D
0002db 9bf0      	SBIS 0x1E,0
0002dc c003      	RJMP _0x200003E
0002dd 1703      	CP   R16,R19
0002de f028      	BRLO _0x2000040
0002df c005      	RJMP _0x2000041
                 _0x200003E:
0002e0 91e0 0209 	LDS  R30,_bytes_to_rx_G100
0002e2 171e      	CP   R17,R30
0002e3 f408      	BRSH _0x2000042
                 _0x2000040:
0002e4 e024      	LDI  R18,LOW(4)
                 _0x2000042:
                 _0x2000041:
                 _0x200003D:
                 _0x2000030:
0002e5 c0cc      	RJMP _0x2000082
                 _0x200003C:
0002e6 33e8      	CPI  R30,LOW(0x38)
0002e7 f431      	BRNE _0x2000045
0002e8 e022      	LDI  R18,LOW(2)
0002e9 91e0 00bc 	LDS  R30,188
0002eb 70ef      	ANDI R30,LOW(0xF)
0002ec 68e0      	ORI  R30,0x80
0002ed c0c8      	RJMP _0x2000083
                 _0x2000045:
0002ee 36e8      	CPI  R30,LOW(0x68)
0002ef f011      	BREQ _0x2000048
0002f0 37e8      	CPI  R30,LOW(0x78)
0002f1 f411      	BRNE _0x2000049
                 _0x2000048:
0002f2 e022      	LDI  R18,LOW(2)
0002f3 c005      	RJMP _0x200004A
                 _0x2000049:
0002f4 36e0      	CPI  R30,LOW(0x60)
0002f5 f011      	BREQ _0x200004D
0002f6 37e0      	CPI  R30,LOW(0x70)
0002f7 f4a1      	BRNE _0x200004E
                 _0x200004D:
0002f8 e020      	LDI  R18,LOW(0)
                 _0x200004A:
0002f9 e010      	LDI  R17,LOW(0)
0002fa 98f0      	CBI  0x1E,0
0002fb 91e0 020a 	LDS  R30,_twi_rx_buffer_size_G100
0002fd 30e0      	CPI  R30,0
0002fe f431      	BRNE _0x2000051
0002ff e021      	LDI  R18,LOW(1)
000300 91e0 00bc 	LDS  R30,188
000302 70ef      	ANDI R30,LOW(0xF)
000303 68e0      	ORI  R30,0x80
000304 c004      	RJMP _0x2000084
                 _0x2000051:
000305 91e0 00bc 	LDS  R30,188
000307 70ef      	ANDI R30,LOW(0xF)
000308 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2000084:
000309 93e0 00bc 	STS  188,R30
00030b c0ad      	RJMP _0x2000022
                 _0x200004E:
00030c 38e0      	CPI  R30,LOW(0x80)
00030d f011      	BREQ _0x2000054
00030e 39e0      	CPI  R30,LOW(0x90)
00030f f539      	BRNE _0x2000055
                 _0x2000054:
000310 9bf0      	SBIS 0x1E,0
000311 c002      	RJMP _0x2000056
000312 e021      	LDI  R18,LOW(1)
000313 c09e      	RJMP _0x2000057
                 _0x2000056:
000314 91e0 00bb 	LDS  R30,187
000316 01da      	MOVW R26,R20
000317 93ec      	ST   X,R30
000318 5f1f      	SUBI R17,-LOW(1)
000319 91e0 020a 	LDS  R30,_twi_rx_buffer_size_G100
00031b 171e      	CP   R17,R30
00031c f4c0      	BRSH _0x2000058
00031d 91e0 020b 	LDS  R30,_twi_slave_rx_handler_G100
00031f 91f0 020c 	LDS  R31,_twi_slave_rx_handler_G100+1
000321 9730      	SBIW R30,0
000322 f411      	BRNE _0x2000059
000323 e026      	LDI  R18,LOW(6)
000324 c08d      	RJMP _0x2000057
                 _0x2000059:
000325 e0a0      	LDI  R26,LOW(0)
                +
000326 91e0 020b+LDS R30 , _twi_slave_rx_handler_G100 + ( 0 )
000328 91f0 020c+LDS R31 , _twi_slave_rx_handler_G100 + ( 0 ) + 1
00032a 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G100,0
00032b 30e0      	CPI  R30,0
00032c f039      	BREQ _0x200005A
00032d 91e0 00bc 	LDS  R30,188
00032f 70ef      	ANDI R30,LOW(0xF)
000330 6ce0      	ORI  R30,LOW(0xC0)
000331 93e0 00bc 	STS  188,R30
000333 c085      	RJMP _0x2000022
                 _0x200005A:
000334 c001      	RJMP _0x200005B
                 _0x2000058:
000335 9af0      	SBI  0x1E,0
                 _0x200005B:
000336 c002      	RJMP _0x200005E
                 _0x2000055:
000337 38e8      	CPI  R30,LOW(0x88)
000338 f409      	BRNE _0x200005F
                 _0x200005E:
000339 c002      	RJMP _0x2000060
                 _0x200005F:
00033a 39e8      	CPI  R30,LOW(0x98)
00033b f439      	BRNE _0x2000061
                 _0x2000060:
00033c 91e0 00bc 	LDS  R30,188
00033e 70ef      	ANDI R30,LOW(0xF)
00033f 68e0      	ORI  R30,0x80
000340 93e0 00bc 	STS  188,R30
000342 c076      	RJMP _0x2000022
                 _0x2000061:
000343 3ae0      	CPI  R30,LOW(0xA0)
000344 f4b1      	BRNE _0x2000062
000345 91e0 00bc 	LDS  R30,188
000347 70ef      	ANDI R30,LOW(0xF)
000348 6ce0      	ORI  R30,LOW(0xC0)
000349 93e0 00bc 	STS  188,R30
00034b 9af1      	SBI  0x1E,1
00034c 91e0 020b 	LDS  R30,_twi_slave_rx_handler_G100
00034e 91f0 020c 	LDS  R31,_twi_slave_rx_handler_G100+1
000350 9730      	SBIW R30,0
000351 f039      	BREQ _0x2000065
000352 e0a1      	LDI  R26,LOW(1)
                +
000353 91e0 020b+LDS R30 , _twi_slave_rx_handler_G100 + ( 0 )
000355 91f0 020c+LDS R31 , _twi_slave_rx_handler_G100 + ( 0 ) + 1
000357 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G100,0
000358 c001      	RJMP _0x2000066
                 _0x2000065:
000359 e026      	LDI  R18,LOW(6)
                 _0x2000066:
00035a c05e      	RJMP _0x2000022
                 _0x2000062:
00035b 3be0      	CPI  R30,LOW(0xB0)
00035c f411      	BRNE _0x2000067
00035d e022      	LDI  R18,LOW(2)
00035e c002      	RJMP _0x2000068
                 _0x2000067:
00035f 3ae8      	CPI  R30,LOW(0xA8)
000360 f4b1      	BRNE _0x2000069
                 _0x2000068:
000361 91e0 020d 	LDS  R30,_twi_slave_tx_handler_G100
000363 91f0 020e 	LDS  R31,_twi_slave_tx_handler_G100+1
000365 9730      	SBIW R30,0
000366 f059      	BREQ _0x200006A
000367 e0a0      	LDI  R26,LOW(0)
                +
000368 91e0 020d+LDS R30 , _twi_slave_tx_handler_G100 + ( 0 )
00036a 91f0 020e+LDS R31 , _twi_slave_tx_handler_G100 + ( 0 ) + 1
00036c 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G100,0
00036d 2f3e      	MOV  R19,R30
00036e 30e0      	CPI  R30,0
00036f f011      	BREQ _0x200006C
000370 e020      	LDI  R18,LOW(0)
000371 c002      	RJMP _0x200006D
                 _0x200006A:
                 _0x200006C:
000372 e026      	LDI  R18,LOW(6)
000373 c03e      	RJMP _0x2000057
                 _0x200006D:
000374 e000      	LDI  R16,LOW(0)
000375 98f0      	CBI  0x1E,0
000376 c002      	RJMP _0x2000070
                 _0x2000069:
000377 3be8      	CPI  R30,LOW(0xB8)
000378 f4f9      	BRNE _0x2000071
                 _0x2000070:
000379 9bf0      	SBIS 0x1E,0
00037a c002      	RJMP _0x2000072
00037b e021      	LDI  R18,LOW(1)
00037c c035      	RJMP _0x2000057
                 _0x2000072:
00037d 2fe0      	MOV  R30,R16
00037e 5f0f      	SUBI R16,-1
00037f 91a0 0204 	LDS  R26,_twi_tx_buffer_G100
000381 91b0 0205 	LDS  R27,_twi_tx_buffer_G100+1
000383 e0f0      	LDI  R31,0
000384 0fae      	ADD  R26,R30
000385 1fbf      	ADC  R27,R31
000386 91ec      	LD   R30,X
000387 93e0 00bb 	STS  187,R30
000389 1703      	CP   R16,R19
00038a f428      	BRSH _0x2000073
00038b 91e0 00bc 	LDS  R30,188
00038d 70ef      	ANDI R30,LOW(0xF)
00038e 6ce0      	ORI  R30,LOW(0xC0)
00038f c005      	RJMP _0x2000085
                 _0x2000073:
000390 9af0      	SBI  0x1E,0
000391 91e0 00bc 	LDS  R30,188
000393 70ef      	ANDI R30,LOW(0xF)
000394 68e0      	ORI  R30,0x80
                 _0x2000085:
000395 93e0 00bc 	STS  188,R30
000397 c021      	RJMP _0x2000022
                 _0x2000071:
000398 3ce0      	CPI  R30,LOW(0xC0)
000399 f011      	BREQ _0x2000078
00039a 3ce8      	CPI  R30,LOW(0xC8)
00039b f499      	BRNE _0x2000079
                 _0x2000078:
00039c 91e0 00bc 	LDS  R30,188
00039e 70ef      	ANDI R30,LOW(0xF)
00039f 6ce0      	ORI  R30,LOW(0xC0)
0003a0 93e0 00bc 	STS  188,R30
0003a2 91e0 020d 	LDS  R30,_twi_slave_tx_handler_G100
0003a4 91f0 020e 	LDS  R31,_twi_slave_tx_handler_G100+1
0003a6 9730      	SBIW R30,0
0003a7 f031      	BREQ _0x200007A
0003a8 e0a1      	LDI  R26,LOW(1)
                +
0003a9 91e0 020d+LDS R30 , _twi_slave_tx_handler_G100 + ( 0 )
0003ab 91f0 020e+LDS R31 , _twi_slave_tx_handler_G100 + ( 0 ) + 1
0003ad 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G100,0
                 _0x200007A:
0003ae c009      	RJMP _0x2000043
                 _0x2000079:
0003af 30e0      	CPI  R30,0
0003b0 f441      	BRNE _0x2000022
0003b1 e023      	LDI  R18,LOW(3)
                 _0x2000057:
                 _0x2000082:
0003b2 91e0 00bc 	LDS  R30,188
0003b4 70ef      	ANDI R30,LOW(0xF)
0003b5 6de0      	ORI  R30,LOW(0xD0)
                 _0x2000083:
0003b6 93e0 00bc 	STS  188,R30
                 _0x2000043:
0003b8 9af1      	SBI  0x1E,1
                 _0x2000022:
0003b9 9310 0201 	STS  _twi_rx_index,R17
0003bb 9300 0200 	STS  _twi_tx_index,R16
0003bd 9320 0202 	STS  _twi_result,R18
0003bf 9330 0206 	STS  _bytes_to_tx_G100,R19
0003c1 9109      	LD   R16,Y+
0003c2 9119      	LD   R17,Y+
0003c3 9129      	LD   R18,Y+
0003c4 9139      	LD   R19,Y+
0003c5 9149      	LD   R20,Y+
0003c6 9159      	LD   R21,Y+
0003c7 91e9      	LD   R30,Y+
0003c8 bfef      	OUT  SREG,R30
0003c9 91f9      	LD   R31,Y+
0003ca 91e9      	LD   R30,Y+
0003cb 91b9      	LD   R27,Y+
0003cc 91a9      	LD   R26,Y+
0003cd 9199      	LD   R25,Y+
0003ce 9189      	LD   R24,Y+
0003cf 9179      	LD   R23,Y+
0003d0 9169      	LD   R22,Y+
0003d1 90f9      	LD   R15,Y+
0003d2 9019      	LD   R1,Y+
0003d3 9009      	LD   R0,Y+
0003d4 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0003d5 931a      	ST   -Y,R17
0003d6 2f1a      	MOV  R17,R26
                 _0x2020006:
0003d7 91e0 00c0 	LDS  R30,192
0003d9 72e0      	ANDI R30,LOW(0x20)
0003da f3e1      	BREQ _0x2020006
0003db 9310 00c6 	STS  198,R17
0003dd 9119      	LD   R17,Y+
0003de 9508      	RET
                 ; .FEND
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
0003df d199      	RCALL __SAVELOCR4
0003e0 018d      	MOVW R16,R26
0003e1 813c      	LDD  R19,Y+4
0003e2 2fa3      	MOV  R26,R19
0003e3 dff1      	RCALL _putchar
0003e4 01d8      	MOVW R26,R16
0003e5 91ed      	LD   R30,X+
0003e6 91fd      	LD   R31,X+
0003e7 9631      	ADIW R30,1
0003e8 93fe      	ST   -X,R31
0003e9 93ee      	ST   -X,R30
0003ea d195      	RCALL __LOADLOCR4
0003eb 9625      	ADIW R28,5
0003ec 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0003ed 93ba      	ST   -Y,R27
0003ee 93aa      	ST   -Y,R26
0003ef 9726      	SBIW R28,6
0003f0 d186      	RCALL __SAVELOCR6
0003f1 e010      	LDI  R17,0
0003f2 85ac      	LDD  R26,Y+12
0003f3 85bd      	LDD  R27,Y+12+1
0003f4 e0e0      	LDI  R30,LOW(0)
0003f5 e0f0      	LDI  R31,HIGH(0)
0003f6 93ed      	ST   X+,R30
0003f7 93fc      	ST   X,R31
                 _0x202001C:
0003f8 89ea      	LDD  R30,Y+18
0003f9 89fb      	LDD  R31,Y+18+1
0003fa 9631      	ADIW R30,1
0003fb 8bea      	STD  Y+18,R30
0003fc 8bfb      	STD  Y+18+1,R31
0003fd 9731      	SBIW R30,1
0003fe 91e4      	LPM  R30,Z
0003ff 2f2e      	MOV  R18,R30
000400 30e0      	CPI  R30,0
000401 f409      	BRNE PC+2
000402 c10b      	RJMP _0x202001E
000403 2fe1      	MOV  R30,R17
000404 30e0      	CPI  R30,0
000405 f431      	BRNE _0x2020022
000406 3225      	CPI  R18,37
000407 f411      	BRNE _0x2020023
000408 e011      	LDI  R17,LOW(1)
000409 c001      	RJMP _0x2020024
                 _0x2020023:
00040a d14f      	RCALL SUBOPT_0x1
                 _0x2020024:
00040b c101      	RJMP _0x2020021
                 _0x2020022:
00040c 30e1      	CPI  R30,LOW(0x1)
00040d f4a1      	BRNE _0x2020025
00040e 3225      	CPI  R18,37
00040f f411      	BRNE _0x2020026
000410 d149      	RCALL SUBOPT_0x1
000411 c0fa      	RJMP _0x20200D2
                 _0x2020026:
000412 e012      	LDI  R17,LOW(2)
000413 e040      	LDI  R20,LOW(0)
000414 e000      	LDI  R16,LOW(0)
000415 322d      	CPI  R18,45
000416 f411      	BRNE _0x2020027
000417 e001      	LDI  R16,LOW(1)
000418 c0f4      	RJMP _0x2020021
                 _0x2020027:
000419 322b      	CPI  R18,43
00041a f411      	BRNE _0x2020028
00041b e24b      	LDI  R20,LOW(43)
00041c c0f0      	RJMP _0x2020021
                 _0x2020028:
00041d 3220      	CPI  R18,32
00041e f411      	BRNE _0x2020029
00041f e240      	LDI  R20,LOW(32)
000420 c0ec      	RJMP _0x2020021
                 _0x2020029:
000421 c002      	RJMP _0x202002A
                 _0x2020025:
000422 30e2      	CPI  R30,LOW(0x2)
000423 f439      	BRNE _0x202002B
                 _0x202002A:
000424 e050      	LDI  R21,LOW(0)
000425 e013      	LDI  R17,LOW(3)
000426 3320      	CPI  R18,48
000427 f411      	BRNE _0x202002C
000428 6800      	ORI  R16,LOW(128)
000429 c0e3      	RJMP _0x2020021
                 _0x202002C:
00042a c003      	RJMP _0x202002D
                 _0x202002B:
00042b 30e3      	CPI  R30,LOW(0x3)
00042c f009      	BREQ PC+2
00042d c0df      	RJMP _0x2020021
                 _0x202002D:
00042e 3320      	CPI  R18,48
00042f f010      	BRLO _0x2020030
000430 332a      	CPI  R18,58
000431 f008      	BRLO _0x2020031
                 _0x2020030:
000432 c007      	RJMP _0x202002F
                 _0x2020031:
000433 e0aa      	LDI  R26,LOW(10)
000434 9f5a      	MUL  R21,R26
000435 2d50      	MOV  R21,R0
000436 2fe2      	MOV  R30,R18
000437 53e0      	SUBI R30,LOW(48)
000438 0f5e      	ADD  R21,R30
000439 c0d3      	RJMP _0x2020021
                 _0x202002F:
00043a 2fe2      	MOV  R30,R18
00043b 36e3      	CPI  R30,LOW(0x63)
00043c f439      	BRNE _0x2020035
00043d d123      	RCALL SUBOPT_0x2
00043e 89e8      	LDD  R30,Y+16
00043f 89f9      	LDD  R31,Y+16+1
000440 81a4      	LDD  R26,Z+4
000441 93aa      	ST   -Y,R26
000442 d124      	RCALL SUBOPT_0x3
000443 c0c8      	RJMP _0x2020036
                 _0x2020035:
000444 37e3      	CPI  R30,LOW(0x73)
000445 f429      	BRNE _0x2020038
000446 d11a      	RCALL SUBOPT_0x2
000447 d125      	RCALL SUBOPT_0x4
000448 d0f3      	RCALL _strlen
000449 2f1e      	MOV  R17,R30
00044a c007      	RJMP _0x2020039
                 _0x2020038:
00044b 37e0      	CPI  R30,LOW(0x70)
00044c f449      	BRNE _0x202003B
00044d d113      	RCALL SUBOPT_0x2
00044e d11e      	RCALL SUBOPT_0x4
00044f d0f8      	RCALL _strlenf
000450 2f1e      	MOV  R17,R30
000451 6008      	ORI  R16,LOW(8)
                 _0x2020039:
000452 6002      	ORI  R16,LOW(2)
000453 770f      	ANDI R16,LOW(127)
000454 e030      	LDI  R19,LOW(0)
000455 c03a      	RJMP _0x202003C
                 _0x202003B:
000456 36e4      	CPI  R30,LOW(0x64)
000457 f011      	BREQ _0x202003F
000458 36e9      	CPI  R30,LOW(0x69)
000459 f411      	BRNE _0x2020040
                 _0x202003F:
00045a 6004      	ORI  R16,LOW(4)
00045b c002      	RJMP _0x2020041
                 _0x2020040:
00045c 37e5      	CPI  R30,LOW(0x75)
00045d f431      	BRNE _0x2020042
                 _0x2020041:
00045e e7ec      	LDI  R30,LOW(_tbl10_G101*2)
00045f e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000460 83ee      	STD  Y+6,R30
000461 83ff      	STD  Y+6+1,R31
000462 e015      	LDI  R17,LOW(5)
000463 c00c      	RJMP _0x2020043
                 _0x2020042:
000464 35e8      	CPI  R30,LOW(0x58)
000465 f411      	BRNE _0x2020045
000466 6008      	ORI  R16,LOW(8)
000467 c003      	RJMP _0x2020046
                 _0x2020045:
000468 37e8      	CPI  R30,LOW(0x78)
000469 f009      	BREQ PC+2
00046a c0a1      	RJMP _0x2020077
                 _0x2020046:
00046b e8e6      	LDI  R30,LOW(_tbl16_G101*2)
00046c e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00046d 83ee      	STD  Y+6,R30
00046e 83ff      	STD  Y+6+1,R31
00046f e014      	LDI  R17,LOW(4)
                 _0x2020043:
000470 ff02      	SBRS R16,2
000471 c015      	RJMP _0x2020048
000472 d0ee      	RCALL SUBOPT_0x2
000473 89a8      	LDD  R26,Y+16
000474 89b9      	LDD  R27,Y+16+1
000475 9614      	ADIW R26,4
000476 91ed      	LD   R30,X+
000477 91fd      	LD   R31,X+
000478 87ea      	STD  Y+10,R30
000479 87fb      	STD  Y+10+1,R31
00047a 85ab      	LDD  R26,Y+11
00047b 23aa      	TST  R26
00047c f422      	BRPL _0x2020049
00047d d107      	RCALL __ANEGW1
00047e 87ea      	STD  Y+10,R30
00047f 87fb      	STD  Y+10+1,R31
000480 e24d      	LDI  R20,LOW(45)
                 _0x2020049:
000481 3040      	CPI  R20,0
000482 f011      	BREQ _0x202004A
000483 5f1f      	SUBI R17,-LOW(1)
000484 c001      	RJMP _0x202004B
                 _0x202004A:
000485 7f0b      	ANDI R16,LOW(251)
                 _0x202004B:
000486 c009      	RJMP _0x202004C
                 _0x2020048:
000487 d0d9      	RCALL SUBOPT_0x2
000488 89a8      	LDD  R26,Y+16
000489 89b9      	LDD  R27,Y+16+1
00048a 9614      	ADIW R26,4
                +
00048b 91ed     +LD R30 , X +
00048c 91fc     +LD R31 , X
00048d 9711     +SBIW R26 , 1
                 	__GETW1P
00048e 87ea      	STD  Y+10,R30
00048f 87fb      	STD  Y+10+1,R31
                 _0x202004C:
                 _0x202003C:
000490 fd00      	SBRC R16,0
000491 c010      	RJMP _0x202004D
                 _0x202004E:
000492 1715      	CP   R17,R21
000493 f470      	BRSH _0x2020050
000494 ff07      	SBRS R16,7
000495 c008      	RJMP _0x2020051
000496 ff02      	SBRS R16,2
000497 c004      	RJMP _0x2020052
000498 7f0b      	ANDI R16,LOW(251)
000499 2f24      	MOV  R18,R20
00049a 5011      	SUBI R17,LOW(1)
00049b c001      	RJMP _0x2020053
                 _0x2020052:
00049c e320      	LDI  R18,LOW(48)
                 _0x2020053:
00049d c001      	RJMP _0x2020054
                 _0x2020051:
00049e e220      	LDI  R18,LOW(32)
                 _0x2020054:
00049f d0ba      	RCALL SUBOPT_0x1
0004a0 5051      	SUBI R21,LOW(1)
0004a1 cff0      	RJMP _0x202004E
                 _0x2020050:
                 _0x202004D:
0004a2 2f31      	MOV  R19,R17
0004a3 ff01      	SBRS R16,1
0004a4 c016      	RJMP _0x2020055
                 _0x2020056:
0004a5 3030      	CPI  R19,0
0004a6 f099      	BREQ _0x2020058
0004a7 ff03      	SBRS R16,3
0004a8 c006      	RJMP _0x2020059
0004a9 81ee      	LDD  R30,Y+6
0004aa 81ff      	LDD  R31,Y+6+1
0004ab 9125      	LPM  R18,Z+
0004ac 83ee      	STD  Y+6,R30
0004ad 83ff      	STD  Y+6+1,R31
0004ae c005      	RJMP _0x202005A
                 _0x2020059:
0004af 81ae      	LDD  R26,Y+6
0004b0 81bf      	LDD  R27,Y+6+1
0004b1 912d      	LD   R18,X+
0004b2 83ae      	STD  Y+6,R26
0004b3 83bf      	STD  Y+6+1,R27
                 _0x202005A:
0004b4 d0a5      	RCALL SUBOPT_0x1
0004b5 3050      	CPI  R21,0
0004b6 f009      	BREQ _0x202005B
0004b7 5051      	SUBI R21,LOW(1)
                 _0x202005B:
0004b8 5031      	SUBI R19,LOW(1)
0004b9 cfeb      	RJMP _0x2020056
                 _0x2020058:
0004ba c048      	RJMP _0x202005C
                 _0x2020055:
                 _0x202005E:
0004bb e320      	LDI  R18,LOW(48)
0004bc 81ee      	LDD  R30,Y+6
0004bd 81ff      	LDD  R31,Y+6+1
0004be d0f0      	RCALL __GETW1PF
0004bf 87e8      	STD  Y+8,R30
0004c0 87f9      	STD  Y+8+1,R31
0004c1 81ee      	LDD  R30,Y+6
0004c2 81ff      	LDD  R31,Y+6+1
0004c3 9632      	ADIW R30,2
0004c4 83ee      	STD  Y+6,R30
0004c5 83ff      	STD  Y+6+1,R31
                 _0x2020060:
0004c6 85e8      	LDD  R30,Y+8
0004c7 85f9      	LDD  R31,Y+8+1
0004c8 85aa      	LDD  R26,Y+10
0004c9 85bb      	LDD  R27,Y+10+1
0004ca 17ae      	CP   R26,R30
0004cb 07bf      	CPC  R27,R31
0004cc f050      	BRLO _0x2020062
0004cd 5f2f      	SUBI R18,-LOW(1)
0004ce 85a8      	LDD  R26,Y+8
0004cf 85b9      	LDD  R27,Y+8+1
0004d0 85ea      	LDD  R30,Y+10
0004d1 85fb      	LDD  R31,Y+10+1
0004d2 1bea      	SUB  R30,R26
0004d3 0bfb      	SBC  R31,R27
0004d4 87ea      	STD  Y+10,R30
0004d5 87fb      	STD  Y+10+1,R31
0004d6 cfef      	RJMP _0x2020060
                 _0x2020062:
0004d7 332a      	CPI  R18,58
0004d8 f028      	BRLO _0x2020063
0004d9 ff03      	SBRS R16,3
0004da c002      	RJMP _0x2020064
0004db 5f29      	SUBI R18,-LOW(7)
0004dc c001      	RJMP _0x2020065
                 _0x2020064:
0004dd 5d29      	SUBI R18,-LOW(39)
                 _0x2020065:
                 _0x2020063:
0004de fd04      	SBRC R16,4
0004df c019      	RJMP _0x2020067
0004e0 3321      	CPI  R18,49
0004e1 f420      	BRSH _0x2020069
0004e2 85a8      	LDD  R26,Y+8
0004e3 85b9      	LDD  R27,Y+8+1
0004e4 9711      	SBIW R26,1
0004e5 f409      	BRNE _0x2020068
                 _0x2020069:
0004e6 c009      	RJMP _0x20200D3
                 _0x2020068:
0004e7 1753      	CP   R21,R19
0004e8 f010      	BRLO _0x202006D
0004e9 ff00      	SBRS R16,0
0004ea c001      	RJMP _0x202006E
                 _0x202006D:
0004eb c011      	RJMP _0x202006C
                 _0x202006E:
0004ec e220      	LDI  R18,LOW(32)
0004ed ff07      	SBRS R16,7
0004ee c00a      	RJMP _0x202006F
0004ef e320      	LDI  R18,LOW(48)
                 _0x20200D3:
0004f0 6100      	ORI  R16,LOW(16)
0004f1 ff02      	SBRS R16,2
0004f2 c006      	RJMP _0x2020070
0004f3 7f0b      	ANDI R16,LOW(251)
0004f4 934a      	ST   -Y,R20
0004f5 d071      	RCALL SUBOPT_0x3
0004f6 3050      	CPI  R21,0
0004f7 f009      	BREQ _0x2020071
0004f8 5051      	SUBI R21,LOW(1)
                 _0x2020071:
                 _0x2020070:
                 _0x202006F:
                 _0x2020067:
0004f9 d060      	RCALL SUBOPT_0x1
0004fa 3050      	CPI  R21,0
0004fb f009      	BREQ _0x2020072
0004fc 5051      	SUBI R21,LOW(1)
                 _0x2020072:
                 _0x202006C:
0004fd 5031      	SUBI R19,LOW(1)
0004fe 85a8      	LDD  R26,Y+8
0004ff 85b9      	LDD  R27,Y+8+1
000500 9712      	SBIW R26,2
000501 f008      	BRLO _0x202005F
000502 cfb8      	RJMP _0x202005E
                 _0x202005F:
                 _0x202005C:
000503 ff00      	SBRS R16,0
000504 c007      	RJMP _0x2020073
                 _0x2020074:
000505 3050      	CPI  R21,0
000506 f029      	BREQ _0x2020076
000507 5051      	SUBI R21,LOW(1)
000508 e2e0      	LDI  R30,LOW(32)
000509 93ea      	ST   -Y,R30
00050a d05c      	RCALL SUBOPT_0x3
00050b cff9      	RJMP _0x2020074
                 _0x2020076:
                 _0x2020073:
                 _0x2020077:
                 _0x2020036:
                 _0x20200D2:
00050c e010      	LDI  R17,LOW(0)
                 _0x2020021:
00050d ceea      	RJMP _0x202001C
                 _0x202001E:
00050e 85ac      	LDD  R26,Y+12
00050f 85bd      	LDD  R27,Y+12+1
000510 91ed      	LD   R30,X+
000511 91fd      	LD   R31,X+
000512 d06b      	RCALL __LOADLOCR6
000513 9664      	ADIW R28,20
000514 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000515 92ff      	PUSH R15
000516 2ef8      	MOV  R15,R24
000517 9726      	SBIW R28,6
000518 931a      	ST   -Y,R17
000519 930a      	ST   -Y,R16
00051a 01de      	MOVW R26,R28
00051b 9614      	ADIW R26,4
                +
00051c 2400     +CLR R0
00051d 0daf     +ADD R26 , R15
00051e 1db0     +ADC R27 , R0
                 	__ADDW2R15
00051f 018d      	MOVW R16,R26
000520 e0e0      	LDI  R30,LOW(0)
000521 83ec      	STD  Y+4,R30
000522 83ed      	STD  Y+4+1,R30
000523 83ee      	STD  Y+6,R30
000524 83ef      	STD  Y+6+1,R30
000525 01de      	MOVW R26,R28
000526 9618      	ADIW R26,8
                +
000527 2400     +CLR R0
000528 0daf     +ADD R26 , R15
000529 1db0     +ADC R27 , R0
                 	__ADDW2R15
00052a 91ed      	LD   R30,X+
00052b 91fd      	LD   R31,X+
00052c 93fa      	ST   -Y,R31
00052d 93ea      	ST   -Y,R30
00052e 931a      	ST   -Y,R17
00052f 930a      	ST   -Y,R16
000530 edef      	LDI  R30,LOW(_put_usart_G101)
000531 e0f3      	LDI  R31,HIGH(_put_usart_G101)
000532 93fa      	ST   -Y,R31
000533 93ea      	ST   -Y,R30
000534 01de      	MOVW R26,R28
000535 9618      	ADIW R26,8
000536 deb6      	RCALL __print_G101
000537 8119      	LDD  R17,Y+1
000538 8108      	LDD  R16,Y+0
000539 9628      	ADIW R28,8
00053a 90ff      	POP  R15
00053b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00053c 93ba      	ST   -Y,R27
00053d 93aa      	ST   -Y,R26
00053e 91a9          ld   r26,y+
00053f 91b9          ld   r27,y+
000540 27ee          clr  r30
000541 27ff          clr  r31
                 strlen0:
000542 916d          ld   r22,x+
000543 2366          tst  r22
000544 f011          breq strlen1
000545 9631          adiw r30,1
000546 cffb          rjmp strlen0
                 strlen1:
000547 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000548 93ba      	ST   -Y,R27
000549 93aa      	ST   -Y,R26
00054a 27aa          clr  r26
00054b 27bb          clr  r27
00054c 91e9          ld   r30,y+
00054d 91f9          ld   r31,y+
                 strlenf0:
00054e 9005      	lpm  r0,z+
00054f 2000          tst  r0
000550 f011          breq strlenf1
000551 9611          adiw r26,1
000552 cffb          rjmp strlenf0
                 strlenf1:
000553 01fd          movw r30,r26
000554 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _twi_tx_index:
000200           	.BYTE 0x1
                 _twi_rx_index:
000201           	.BYTE 0x1
                 _twi_result:
000202           	.BYTE 0x1
                 _slave_address_G100:
000203           	.BYTE 0x1
                 _twi_tx_buffer_G100:
000204           	.BYTE 0x2
                 _bytes_to_tx_G100:
000206           	.BYTE 0x1
                 _twi_rx_buffer_G100:
000207           	.BYTE 0x2
                 _bytes_to_rx_G100:
000209           	.BYTE 0x1
                 _twi_rx_buffer_size_G100:
00020a           	.BYTE 0x1
                 _twi_slave_rx_handler_G100:
00020b           	.BYTE 0x2
                 _twi_slave_tx_handler_G100:
00020d           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
000555 83ee     +STD Y + 6 , R30
000556 83ff     +STD Y + 6 + 1 , R31
000557 8768     +STD Y + 6 + 2 , R22
000558 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000559 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1:
00055a 932a      	ST   -Y,R18
00055b 85ad      	LDD  R26,Y+13
00055c 85be      	LDD  R27,Y+13+1
00055d 85ef      	LDD  R30,Y+15
00055e 89f8      	LDD  R31,Y+15+1
00055f 9509      	ICALL
000560 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x2:
000561 89e8      	LDD  R30,Y+16
000562 89f9      	LDD  R31,Y+16+1
000563 9734      	SBIW R30,4
000564 8be8      	STD  Y+16,R30
000565 8bf9      	STD  Y+16+1,R31
000566 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
000567 85ad      	LDD  R26,Y+13
000568 85be      	LDD  R27,Y+13+1
000569 85ef      	LDD  R30,Y+15
00056a 89f8      	LDD  R31,Y+15+1
00056b 9509      	ICALL
00056c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
00056d 89a8      	LDD  R26,Y+16
00056e 89b9      	LDD  R27,Y+16+1
00056f 9614      	ADIW R26,4
000570 91ed      	LD   R30,X+
000571 91fd      	LD   R31,X+
000572 83ee      	STD  Y+6,R30
000573 83ff      	STD  Y+6+1,R31
000574 81ae      	LDD  R26,Y+6
000575 81bf      	LDD  R27,Y+6+1
000576 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000577 935a      	ST   -Y,R21
                 __SAVELOCR5:
000578 934a      	ST   -Y,R20
                 __SAVELOCR4:
000579 933a      	ST   -Y,R19
                 __SAVELOCR3:
00057a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00057b 931a      	ST   -Y,R17
00057c 930a      	ST   -Y,R16
00057d 9508      	RET
                 
                 __LOADLOCR6:
00057e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00057f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000580 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000581 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000582 8119      	LDD  R17,Y+1
000583 8108      	LD   R16,Y
000584 9508      	RET
                 
                 __ANEGW1:
000585 95f1      	NEG  R31
000586 95e1      	NEG  R30
000587 40f0      	SBCI R31,0
000588 9508      	RET
                 
                 __DIVW21U:
000589 2400      	CLR  R0
00058a 2411      	CLR  R1
00058b e190      	LDI  R25,16
                 __DIVW21U1:
00058c 0faa      	LSL  R26
00058d 1fbb      	ROL  R27
00058e 1c00      	ROL  R0
00058f 1c11      	ROL  R1
000590 1a0e      	SUB  R0,R30
000591 0a1f      	SBC  R1,R31
000592 f418      	BRCC __DIVW21U2
000593 0e0e      	ADD  R0,R30
000594 1e1f      	ADC  R1,R31
000595 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000596 60a1      	SBR  R26,1
                 __DIVW21U3:
000597 959a      	DEC  R25
000598 f799      	BRNE __DIVW21U1
000599 01fd      	MOVW R30,R26
00059a 01d0      	MOVW R26,R0
00059b 9508      	RET
                 
                 __DIVW21:
00059c d004      	RCALL __CHKSIGNW
00059d dfeb      	RCALL __DIVW21U
00059e f40e      	BRTC __DIVW211
00059f dfe5      	RCALL __ANEGW1
                 __DIVW211:
0005a0 9508      	RET
                 
                 __CHKSIGNW:
0005a1 94e8      	CLT
0005a2 fff7      	SBRS R31,7
0005a3 c002      	RJMP __CHKSW1
0005a4 dfe0      	RCALL __ANEGW1
0005a5 9468      	SET
                 __CHKSW1:
0005a6 ffb7      	SBRS R27,7
0005a7 c006      	RJMP __CHKSW2
0005a8 95b1      	NEG  R27
0005a9 95a1      	NEG  R26
0005aa 40b0      	SBCI R27,0
0005ab f800      	BLD  R0,0
0005ac 9403      	INC  R0
0005ad fa00      	BST  R0,0
                 __CHKSW2:
0005ae 9508      	RET
                 
                 __GETW1PF:
0005af 9005      	LPM  R0,Z+
0005b0 91f4      	LPM  R31,Z
0005b1 2de0      	MOV  R30,R0
0005b2 9508      	RET
                 
                 __PUTPARD1:
0005b3 937a      	ST   -Y,R23
0005b4 936a      	ST   -Y,R22
0005b5 93fa      	ST   -Y,R31
0005b6 93ea      	ST   -Y,R30
0005b7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  32 r1 :   7 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   7 
r16:  68 r17:  62 r18:  55 r19:  22 r20:  19 r21:  22 r22:  17 r23:   8 
r24:  12 r25:   6 r26: 100 r27:  46 r28:  18 r29:   1 r30: 417 r31: 103 
x  :  26 y  : 213 z  :  13 
Registers used: 22 out of 35 (62.9%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   8 
adiw  :  22 and   :   0 andi  :  23 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  30 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   0 brne  :  54 brpl  :   1 brsh  :   7 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :  14 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  18 cpc   :  15 cpi   :  70 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   6 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  32 ld    :  42 ldd   :  78 ldi   : 151 
lds   :  57 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  24 movw  :  32 
mul   :   1 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   9 
ori   :  24 out   :  23 pop   :   1 push  :   1 rcall :  45 ret   :  22 
reti  :   1 rjmp  : 115 rol   :   3 ror   :   0 sbc   :   3 sbci  :   5 
sbi   :  15 sbic  :   1 sbis  :   4 sbiw  :  19 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  78 std   :  42 sts   :  72 sub   :   2 subi  :  21 swap  :   0 
tst   :   3 wdr   :   0 
Instructions used: 63 out of 116 (54.3%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b70   2872     56   2928   16384  17.9%
[.dseg] 0x000100 0x00020f      0     15     15    1024   1.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
